## 5장 배열
	- 배열이라고 하면 특정 자료형을 연속으로 공간이 확보된 자료형의 집합을 말한다.
	- 이를 1차원 배열이라고 한다.
	- 배열을 사용하지 않았을 때 국어, 영서, 수학을 저장할 경우 
	- kor_score, eng_score, mat_score라고 점수에 대한 변수를 저장하여 사용할 것이다.
	
		int kor_score = 0;
		int eng_score = 0;
		int mat_score = 0;
		
	- 이 과정에서 과학 점수가 추가될 경우 다시 과학 점수에 대한 sci_score 변수를 추가한다.
	
		int kor_score = 0;
		int eng_score = 0;
		int mat_score = 0;
		int sci_score = 0;
	
	- 점수가 추가된다거나 혹은 학생 1명이 아닌 2명이 된다면??
	
		int stu1_kor_score = 0;
		int stu1_eng_score = 0;
		int stu1_mat_score = 0;
		int stu1_sci_score = 0;
	
	
		int stu2_kor_score = 0;
		int stu2_eng_score = 0;
		int stu2_mat_score = 0;
		int stu2_sci_score = 0;
		
	- 이와 같이 점수에 대한 과목이 늘어날 때마다 그리고 학생 수가 늘어날 떄마다 변수 선언의 수가 늘어난다.

	- 배열을 사용하면 한 줄로 선언할 수 있다.	

# 5.1 각 자료의 배열(Sample01~04)
	1. 배열에 담는 방법
		
		(자료형)[] 배열명 = new 자료형[배열의 개수];
		
		- int 자료형을 배열로 만들 경우 해당 자료형으로 배열의 공간을 확보하는 것과 같다.
		- int 자료형은 4바이트 자료형이다.
		
			int[] score = new int[3];	// 4바이트의 공간이 3개가 확보된다.
	
	**2. new 키워드는 객체지향에서 클래스를 생성할 때 new 키워드를 사용하여 인스턴스를 생성한다.
	- 자료형을 배열로 생성할 때 new 키워드를 사용한다고 알아두면 편하다.
	
	3. 배열의 길이 구하기
		
		배열명.length
		
		- 배열의 값을 가져온다면 배열이 몇 개인지를 먼저 알아야 합니다.
		- 앞서 length를 통해서 배열의 길이를 얻게 되었습니다.
		- 배열이 길이가 3일 때 배열의 순차적인 번호를 부여하여 가져올 수 있습니다.
		- 이 순차적인 번호를 배열의 인덱스(index)라고 합니다.
		- 배열의 인덱스는 0번부터 시작하여 배열의 길이만큼 1씩 증가합니다.
		
	4. 배열의 복사
		- clone() 메서드를 활용하여 복사 할 수 있다.
		
			자료형[] 생성할배열변수명 = 복사할배열변수명.clone();
	
# 5.2 다차원 배열(Sample05 ~ 09)
	- 1차원 배열을 또 배열로 구성한 것을 2차원 배열이라고 합니다.
	- 2차원 배열을 또 배열로 구성하면 3차원 배열이라고 합니다.
	- 실제로 흔히 사용하는 배열을 2차원 배열이지만, 3차원 배열까지도 사용합니다.
	
	1. 2차원 배열(가로 * 세로)
		1.1 아파트 1층에 3세대가 있습니다.
			- 변수로 만든다면
				int Household1;
				int Household2;
				int Household3;
			- 배열로 만든다면
				int[] household = new int[3];
		- 그런데 1층만 있는게 아니라 5층까지 있습니다.
		- 이제 한 개의 자료형을 3개씩 5개를 배열로 만들어야 합니다. 
			- 이때 다차원 배열을 사용하는데 2차원 배열로 표현해보겠습니다.
				int[][] household = new int[5][3];
		- 3개의 배열 안에 5개의 공간을 각각 할당합니다. 
		- 5개의 공간을 할당받은 배열이 3개의 배열로 다시 할당받게 됩니다.
		- 3개씩 5개의 공간이 생성됩니다.
		- 그런데 2층은 3개의 세대가 있는게 아니라 1세대가 있으며 나머지는 공용 공간이었습니다.
		
		- 2층만 1세대가 살고 있으니 다음과 같이 재정의를 합니다.
			int[][]household = new int[5][3];
			household[1] = new int[1];
			
			- new int[1];이 실행되면서 household[1]은 3개의 공간에서 1개의 배열 공간이 재정이 되었습니다.
		
		1.2 특정한 구분자를 갖는 문자열을 2차원 배열로 변환할 경우가 많다.(Sample06)
			예)
				String names = "빵형|상도|타노스|인호|학건";
			
			- 배열로 처리하는 경우가 실제로 많이 있습니다. 이때 String 객체에서 제공하는 메서드로 splite()가 있습니다.
				
				String[] split(String regex)
				
				- 반환 자료형은 String 배열로 매개변수에 regex는 구분자입니다. 
				- names의 구분자는 |(pipe 파이프)로 되어있어서 
				- Split("|")를 하면 파이프를 기준으로 문자열을 잘라서 배열로 반환하게 됩니다.
				
				- 참고로 [15장 정규 표현식(Regular expression)]에서 정규식을 활용한 자르기도 가능합니다.
				
		1.3 3차원 배열(가로 * 세로 * 반복)
		예) 앞서 한 2차원 배열 같은 아파트 건물이 2채가 있다. 이를 소스코드로 표현하면?(Sample07)
		
			int[][][] household = new int[2][5][3]; 	// 2채 5층 건물에 각 층마다 3개 세대를 배열로 할당
			
			- 미리 들어갈 배열의 수를 다 알고 있는 상태에서 데이터를 넣어야 한다.
			- 이미 공간이 할당되고 데이터도 들어가 있는 상태에서는 데이터가 100% 유지된 상태에서 배열의 수를 더 늘리거나 줄일 수는 없다.
			
			- 예컨대, 학교에서 한 반에 새로운 학생이 전학을 오거나 가게 되면 
			- 해당 반에 대한 배열을 모두 삭제하고 new 키워드를 활용해서 다시 배열을 생성하고 데이터를 넣어야 하는 경우가 생깁니다.
			- 이러한 문제를 해결하기 위한 배열을 자유롭게 추가, 삭제, 수정할 수 있는 ArrayList를 활용한 배열이 있습니다.(11장 컬렉션 프레임워크)
			
# 5.3 Arrays 클래스
	- Arrays에서 제공하는 메서드 API가 파라미터 자료형에 따라서 동일한 것이 너무 많아서 메서드명별로 자주 사용하는 것을 중심으로
	
	1. Array.toString() - Sample10
		- toString() 메서드는 인자로 넘어온 배열의 내용을 문자열로 배열의 내용을 출력합니다.
		- 다만 1차원 배열에 한하여 문자열로 내용을 출력할 수 있습니다.
		- 2차원 이상의 배열을 출력하는 방법은 [5.2.2 3차원에서 Arrays.deepToString()를 이용했다.]
		
		- 1차원 배열까지는 toString() 메서드로 배열의 내용을 출력이 가능하지만
		- 2차원 이상의 배열은 toString() 메서드로는 출력이 안됩니다.
		- 2차원 이상의 배열에서는 deepToString() 메서드를 이용하면 자세히 출력됩니다.
		
		- Arrays.toString() 메서드
			
			static String toString(Object[] a)
			- 배열의 내용을 문자열로 반환
		
		- Arrays.deepToString() 메서드
		
			static String deepToString(Object[] a)
			- 다중 배열의 내용을 문자열로 반환
			
	2. Arrays.equals()	- Sample11
		- 배열간의 내용이 같은지를 비교하여 같으면 true, 다르면 false값을 반환하는 메서드입니다.
		
		- Array.equals() 메서드
			
			static String equals(Object[] a, Object[] a2)
			- 두 개의 배열의 내용이 같으면 true를 다르면 false를 반환
			
		- Arrays.deepEquals() 메서드
		
			static boolean deepEquals(Object[] a, Object[] a2)
			- 두 개의 다차원 배열의 내용을 비교하여 같으면 true를 다르면 false를 반환
			
	3. Arrays.copyOf()
		- 배열을 독같이 복사하되 지정한 길이까지만 정해서 복사할 수 있습니다.
		
		- Arrays.copyOf(Object[] original, int newLength) 메서드
			static Object[] copyOf(Object[] original, int newLength)
			- 배열의 길이만큼만 배열을 복사하여 변환
		
		- Arrays.copyOfRange(Object[] original, int from, int to) 메서드
			static Object[] copyOfRange(Object[] original, int from, int to)
			- 지정된 배열의 범위만 복사하여 반환 	
			
	4. Arrays.sort()
		- 배열의 내용을 오름차순으로 정렬하는 메서드
		- Arrays.sort(Object[] a)
			static void sort(Object[] a)
			- 배열의 내용을 오름차순으로 정렬
		
			static void sort(Object[] a, int fromIndex, int toIndex)
			- 배열의 지정된 범위의 내용만 오름차순으로 정렬
	
	5. Arrays.binarySearch()
		- 이진 검색(Binary Search)은 배열에서 데이터를 탐색하는 알고리즘 중의 하나다.
		- 이진 검색은 데이터가 정렬되어야만 적용할 수 있으며
		- 배열의 가운데 있는 데이터와 대상 데이터를 비교해서 크면 오른쪽, 작으면 왼쪽에 위치하며
		- 다시 배열의 가운데 있는 데이터와 비교하며 값을 찾을 때가지 반복합니다.
		- 반복하면서 비교 할 때마다 비교 대상이 반으로 줄어들어 검색 속도를 높이는 것입니다.
		
		- Arrays.binarySearch(Object[] a, Object key) 메서드
			
			Static int binarySearch(Object[] a, Object key)
			- 이진 검색 알고리즘을 사용하여 지정된 값을 배열에서 찾아서 인덱스를 반환
		
			Static int binarySearch(Object[] a, int formIndex, int toIndex, Object key)
			- 이진 검색 알고리즘을 사용하여 지정된 값을 배열의 지정된 범위 내에서 찾아서 인덱스를 반환
		
		- 이진 검색은 기본적으로 정렬되어야 합니다.
		- 정렬되어 있지 않으면 검색되지 않을 수 있습니다.
	
	6. Arrays.asList()
		- List 자료형에 배열을 쉽게 추가하는 메서드
		
		- Arrays.asList(T...a) 메서드
			Static <T> List<T> asList<T... a>
			- 입력한 인자를 배열로 반환하여 등록	
		
		- List에서 대표적으로 ArrayList 클래스를 배열로 제일 많이 사용하게 되는데
		- ArrayList 자료형에 데이터를 삽입하는 방법은 add() 메서드를 활용해서
		- 한 번에 한 개씩밖에 넣을 수 없는점 때문에 
		- asList()를 활용하여 쉽게 데이터를 삽입할 수 있다. (Sample15)
		
			
		