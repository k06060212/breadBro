// 04장 연산자

# 01 산술 연산자 (Sample01)
	- 수치 계산할 때 필요한 연산자 
	- 가(+), 감(-), 승(*), 제(/)외에 나머지(%)까지 총 5가지
	- 연산자 대입(=) 문자 앞뒤로 한 칸씩 공백을 두는 것이 보기에 편함

# 02 증감 연산자
	- 증감 연산자는 피연산자로부터 1을 더하거나 빼는 연산자를 말함
	- 변수의 앞에 붙으면 전치 연산자
	- 변수의 뒤에 붙으면 후치 연산자 
	
	1. 전치 증감 연산자(Sample02~03)
		- 변수 앞에 증가 연산자(++)를 붙이며 변수의 값을 먼저 증가시킨 후에 명령을 실행합니다. 
	
	2. 후치 증감 연산자(Sample04~05)
		- 후치 증가 연산자는 변수 뒤에 증가 연산자(++)를 붙이며 명령을 실행한 후에 변수의 값을 증가시킵니다.
		
# 03 비교 연산자(Sample06)
	- 비교 연산자는 두 개의 변수나 리터럴을 비교하는 연산자를 말한다.

# 04 논리 연산자(Sample07)
	- 논리 연산자는 두 개의 피연산자를 대상으로 연산을 수행하여 참과 거짓을 결정할 때 사용하며 흔히 조건식이라고 말합니다.
	- 둘 다 만족해야 하는지 혹은 하나만 만족해야 하는지, 조건이 만족하면 불만족 혹은 불만족하면 만족으로 할 것인지 판별하는 연산자입니다.
	- 논리 연산자는 주로 조건문에서 많이 사용하는 연산자이다.
	
	1. 논리 연산자
	& 	논리곱(AND) 		A&B 	A와 B 모두가 참이면 참 아니면 거짓
	|	논리합(OR)		A|B		A와 B 둘 중 하나 이상 참이면 참 둘 다 거짓이면 거짓
	^ 	베타적 논리합(XOR)	A^B		A와 B가 다르면 참, 같으면 거짓
	! 	논리부정(NOT)		!A		A가 참이면 거짓, 거짓이면 참
	
	2. 논리 곱과 합
		- 논리곱의 경우 두 조건이 모두 참 또는 거짓이여야 한다.
		- 하지만 A가 거짓이면 B가 참이든 거짓이든 환인할 필요 없이 식은 거짓이 된다.
		- 논리 합도 마찬가지로 둘 중 하나가 참이면 참, 거짓이면 거짓이 된다.
		- 논리곱과 논리합에만 있는 기능이다.
		- 가독성을 위해 논리곱과 논리합은 연산자를 2개씩 넣어서 &&와 ||로 구현한다.
		- 실무 프로젝트에서도 논리 연산자를 사용할 때 &와 |보다는 &&와 ||를 주로 사용한다.
		
	3. 부정 연산자 
		- 잘못된 부정 논리 연산자 사용  			!2 > 1
		- 비교 연산자에 부정 논리 연산자의 올바른 사용 	!(2>1)	

# 05 비트 연산자(Sample 08 ~ 14 비트 연산자 순서로)
	- 비트 연산자는 웹 프로그래밍을 할 떄는 사용할 일이 거의 없으나 알고리즘에서는 제법 많이 다루고 있다. 
	- 데이터가 컴퓨터에 저장될 때는 비트 단위로 저장되며 비트 연산자는 메모리에 저장된 데이터를 비트 단위로 연산한다.
	
	1. 비트 연산자
	&			AND					두 비트 모두 1일대 1일 반환
	|			OR					두 비트 중 적어도 하나가 1이면 1을 반환
	^			XOR					두 비트가 다르면 1을 반환
	~ 			NOT 				0인 비트는 1로, 1인 비트는 0으로 반전
	<<		Signed left shift		비트를 왼쪽으로 이동
	>> 		Signed right shift 		비트를 오른쪽으로 인동
	>>> 	Unsigned right shift	왼쪽의 남는 비트를 부호화는 무관하게 0으로 채움
	
	2. int 자료형을 2진수로 표시하는 방법으로 Integer.toBinaryString() 메서드를 활용한다.
	
	3. 패딩문자(padding character)
		- 패팅에 사용되는 의미 없느 문자로 보통 '0'이나 공백을 의미한다. 
	
	- 주의 1의 NOT이 -1이 아니다.
	
	- 양의 정수는 0부터 시작한다.
	- 음의 정수는 모두 1인 상태로 시작해서 -1 값으로 시작되기 때문에 음수는 값 하나가 더 크다.
	 	예) 양수 60의 NOT은 60보다 1 큰 수의 음수인 -60이 되고
	 		음수 10의 NOT일 경우는 반대로 1 작은 수의 정수인 양수 9가 됩니다.
	

# 06 복합대입 연산자(Sample15)
	- 복합대입 연산자 설명 전.. 변수 스스로의 값이 증가할 때 우리는 다음과 같이 한다.
		int num = 1;
		num = num + 1;
		num = num -5;
		num = num * 3;
		num = num / 2;
	- 연산식을 보면 공통으로 'num = num'은 모두 같다.
	- 이 부분을 간결하게 처리하는 방법으로 복합대입 연산자를 사용한다.
	- 복합대입 연산자는 대입 연산자(=) 산술 연산자를 대입 연산자 앞에 붙여넣음으로써 코드를 간결하게 표현한다.
	
	1. 복합대입 연산자
	+=		A += 3 		변수 A에 3을 더한 후, 결과값을 변수 A에 대입
	-=		A -= 3		변수 A에 3을 뺀 후, 결과값을 변수 A에 대입
	*= 		A *= 3 		변수 A에 3을 곱한 후, 결과값을 변수 A에 대입
	/= 		A /= 3 		변수 A를 3을 나눈 후, 결과값을 변수 A에 대입
	%= 		A %= 3 		변수 A를 3으로 나누 후, 나머지 값을 변수 A에 대입
	
	&=		A &= 3 		변수 A를 3과 AND 연산한 후, 결과값을 변수 A에 대입
	|=		A |= 3 		변수 A를 3과 OR 연산한 후, 결과값을 변수 A에 대입
	^=		A ^= 3 		변수 A를 3과 XOR 연산한 후, 결과값을 변수 A에 대입
	<<=    	A <<= 3		변수 A를 왼쪽으로 3비트만큼 이동한 후, 결과값을 변수 A에 대입
	>>= 	A >>= 3 	변수 A를 오른쪽으로 3비트만큼 이동한 후, 결과값을 변수 A에 대입
	>>>=   	A >>>= 3	변수 A를 오른쪽으로 3비트만큼 이동하고 왼쪽의 빈 공간을 모두 0으로 채워서 A에 대입  	
	

# 07 삼항 연산자
	- 삼항 연산자는 말 그대로 3개의 항을 두고 연산하는 거라고 이해하면 된다.
	- 여기서 3개의 항이라는 것은 첫 번째 항에는 조건식이 들어가며 
	- 첫 번째 항의 값이 참이면 두 번째 항의 값이 반환되고 
	- 첫 번째 항의 값이 거짓이면 세 번째 항의 값이 반환된다.
	
	- 삼항 연산자는 물음표(?)와 콜록(:)으로 구분된다.
	- 첫 번째 항과 두 번째 항의 구분은 물음표(?)로 하며
	- 두 번째 항과 세 번째 항의 구분은 콜론(:)으로 합니다.
	
	- 삼항 연산자를 삼항 조건 식, 삼항식이라고 부르기도 한다.
	
	- 삼항 연산자의 공식
		
		(조건식) ? 처리식1(참일 때 처리) : 처리식2(거짓일 때 처리)	// 1항 ? 2항 : 3항
	
	- 1항인 조건식에는 boolean 자료형이 오거나 비교 연산자가 들어와서 
	- 참(true)이나 거짓(fake)이냐에 따라 물음표 이후의 처리식이 실행된다.
	
	
