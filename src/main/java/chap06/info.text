## 반복문

# 1. for문
	1) for문 사용법
		for( 1.초기식; 2.조건식; 4.증감식) {
			3. 실행문
		}
		
	2) 1개의 실행문만 존재하는 for문 사용법
		for( 1.초기식; 2.조건식; 4.증감식) 
			3. 실행문
		
		for( 1.초기식; 2.조건식; 4.증감식) 3. 실행문
		
	3) for문을 활용한 무한 반복(1, 2, 4를 모두 생략)
		for(;;){
			3.실행문
		}
		
	Sample01 0번부터가 아닌 1부터 10번까지 출력하는 소스코드를 반복문을 사용하지 않고 작성
	Sample02 반복문을 사용하여 Sample01과 같은 패턴 출력
	Sample03 String 자료형을 char 자료형의 배열로 받아서 for문을 이용해서 한 줄로 출력
		
# 2. 다중 for문

	Sample04 for문을 이용한 구구단 출력 1~9단
	Sample05 거꾸로 된 삼각형 모양으로 '#' 출력 역 피라미드형

# 3. break
	- break 문을 만나게 되면 반복문은 종료

	Sample06 구구단에서 9까지 곱을 출력하는데 1까지만 곱한 후 출력하고 중단하게 구현

# 4. Continue
	- 반복문 수행 중 continue 키워드를 만나게 되면 이후 코드는 실행하지 않고 현재의 실행문을 종료하고 조건문으로 다시 돌아감

	Sample07 구구단에

# 5. 향상된 for문
	- for문을 이용, 초기식, 조건식, 증감식을 사용하지 않고 
	- 배열의 자료수만큼 배열을 0번째 데이터부터 마지막 데이터가지 하나하나 꺼내어 반복 실행
	
	- 향상된 for문
		for(자료형 변수명 : 배열명){
			실행문
		}	
	- 향상된 for문을 사용하지 않고 배열의 내용을 출력하려면?
		for(int i; i < array.length; i++){
			String data = (String) array[i];
			System.out.println(data);
		}
	
		향상된 for문
		for(String data : array){
			System.out.prinln(data);
		}
			
	Sample08 문자열 자료형을 배열로 한 향상된 for문 출력
	Sample09 향상된 for문을 이용, String 문자열을 char로 출력(sample03)

# 6. While문	
	- while문은 조건식만 있다.
	- 필요시 while문 이전에 초기식을 만들고 
	- 증감식은 반복되는 실행문 안에 얼마든지 원하는 곳에 넣는다.
	
	- while문

		초기식
		while(조건식){
			실행문
		}
	
	- 조건식이 true인 동안 실행문이 계속해서 반복되며 
	- 실행문 중에 증감식을 넣어서 조건식이 false가 되면 while문에서 빠져나가게 된다.
	
	Sample10 while문을 활용 1부터 10까지 출력
	
# 7. do ~ while문
	- do ~ while문은 while문과 비슷하지만 다른 점은 
	- 먼저 한 번은 실행하고 
	- 뒤에 조건식이 맞는지 확인하고
	- 조건이 true면 실행문을 다시 실행합니다.
	- 조건식이 false가 될 때까지 반복하게 됩니다.
	
	- do ~ while문
		
		do{
			실행문
		}while(조건식)	// 조건식이 true면 반복, false면 반복 종료
		
	Sample11 한개씩 늘어나는 *출력

